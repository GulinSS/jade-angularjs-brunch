// Generated by CoffeeScript 1.6.2
(function() {
  var JadeAngularJsCompiler, fileWriter, fs, jade, mkdirp, sysPath,
    __hasProp = {}.hasOwnProperty;

  jade = require('jade');

  sysPath = require('path');

  mkdirp = require('mkdirp');

  fs = require('fs');

  fileWriter = function(newFilePath) {
    return function(err, content) {
      var dirname;

      if (err != null) {
        throw err;
      }
      if (content == null) {
        return;
      }
      dirname = sysPath.dirname(newFilePath);
      return mkdirp(dirname, '0775', function(err) {
        if (err != null) {
          throw err;
        }
        return fs.writeFile(newFilePath, content, function(err) {
          if (err != null) {
            throw err;
          }
        });
      });
    };
  };

  module.exports = JadeAngularJsCompiler = (function() {
    JadeAngularJsCompiler.prototype.brunchPlugin = true;

    JadeAngularJsCompiler.prototype.type = 'template';

    JadeAngularJsCompiler.prototype.extension = 'jade';

    function JadeAngularJsCompiler(config) {
      var _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7;

      this["public"] = config.paths["public"];
      this.pretty = !!((_ref = config.plugins) != null ? (_ref1 = _ref.jade) != null ? _ref1.pretty : void 0 : void 0);
      this.doctype = ((_ref2 = config.plugins) != null ? (_ref3 = _ref2.jade) != null ? _ref3.doctype : void 0 : void 0) || "5";
      this.locals = (_ref4 = config.plugins) != null ? (_ref5 = _ref4.jade_angular) != null ? _ref5.locals : void 0 : void 0;
      this.modulesFolder = (_ref6 = config.plugins) != null ? (_ref7 = _ref6.jade_angular) != null ? _ref7.modules_folder : void 0 : void 0;
      this.compileTrigger = sysPath.normalize(this["public"] + sysPath.sep + (config.paths.jadeCompileTrigger || 'js/dontUseMe'));
    }

    JadeAngularJsCompiler.prototype.compile = function(data, path, callback) {
      var content, err, error;

      try {
        return content = jade.compile(data, {
          compileDebug: false,
          client: false,
          filename: path,
          pretty: this.pretty,
          doctype: this.doctype
        });
      } catch (_error) {
        err = _error;
        return error = err;
      } finally {
        callback(error, "");
      }
    };

    JadeAngularJsCompiler.prototype.preparePair = function(pair) {
      pair.path.push(pair.path.pop().slice(0, -this.extension.length) + 'html');
      return pair.path.splice(0, 1, this["public"]);
    };

    JadeAngularJsCompiler.prototype.writeStatic = function(pair) {
      var writer;

      this.preparePair(pair);
      writer = fileWriter(sysPath.join.apply(this, pair.path));
      return writer(null, pair.result);
    };

    JadeAngularJsCompiler.prototype.setupModule = function(pair) {
      var copyfolder, jsFileName, moduleName, modulePath, result, virtualPathGen;

      this.preparePair(pair);
      pair.path.splice(1, 1, 'js');
      modulePath = pair.path.slice(2, pair.path.lastIndexOf(this.modulesFolder) + 1);
      if (modulePath.length === 0) {
        modulePath.push(this.modulesFolder);
      }
      moduleName = modulePath.join('.');
      jsFileName = moduleName + '.js';
      modulePath.push(pair.path[pair.path.length - 1]);
      copyfolder = pair.path.slice(0, 2);
      copyfolder.push(jsFileName);
      virtualPathGen = function() {
        if (modulePath.length === 2) {
          return '/' + modulePath.join('/');
        } else {
          return '/' + [modulePath[0], modulePath[2]].join('/');
        }
      };
      return result = {
        moduleName: moduleName,
        modulePath: sysPath.join.apply(this, copyfolder),
        virtualPath: virtualPathGen(),
        content: pair.result
      };
    };

    JadeAngularJsCompiler.prototype.parseStringToJSArray = function(str) {
      var stringArray;

      stringArray = '[';
      str.split('\n').map(function(e, i) {
        return stringArray += "\n'" + e.replace(/'/g, "\\'") + "',";
      });
      return stringArray += "''" + '].join("\\n")';
    };

    JadeAngularJsCompiler.prototype.writeModules = function(modules) {
      var content, moduleName, templates, writer, _results,
        _this = this;

      _results = [];
      for (moduleName in modules) {
        if (!__hasProp.call(modules, moduleName)) continue;
        templates = modules[moduleName];
        content = "angular.module('" + moduleName + "', [])";
        templates.map(function(e, i) {
          var inlineContent;

          inlineContent = _this.parseStringToJSArray(e.content);
          return content += "\n.run(['$templateCache', function($templateCache) {\n  return $templateCache.put('" + e.virtualPath + "', " + inlineContent + ");\n}])";
        });
        content += ";";
        writer = fileWriter(templates[0].modulePath);
        _results.push(writer(null, content));
      }
      return _results;
    };

    JadeAngularJsCompiler.prototype.prepareResult = function(compiled) {
      var pathes, result,
        _this = this;

      pathes = ((function() {
        var _i, _len, _results;

        _results = [];
        for (_i = 0, _len = compiled.length; _i < _len; _i++) {
          result = compiled[_i];
          if (result.path === this.compileTrigger) {
            _results.push(result.sourceFiles);
          }
        }
        return _results;
      }).call(this))[0];
      if (pathes === void 0) {
        return [];
      }
      return pathes.map(function(e, i) {
        var content, data;

        data = fs.readFileSync(e.path, 'utf8');
        content = jade.compile(data, {
          compileDebug: false,
          client: false,
          filename: e.path,
          pretty: _this.pretty,
          doctype: _this.doctype
        });
        return result = {
          path: e.path.split(sysPath.sep),
          result: content(_this.locals)
        };
      });
    };

    JadeAngularJsCompiler.prototype.onCompile = function(compiled) {
      var modules, modulesRows, pair, preResult, _i, _len;

      preResult = this.prepareResult(compiled);
      for (_i = 0, _len = preResult.length; _i < _len; _i++) {
        pair = preResult[_i];
        if (pair.path.indexOf(this.modulesFolder) === -1 && pair.path.indexOf('assets') === -1) {
          this.writeStatic(pair);
        }
      }
      modulesRows = (function() {
        var _j, _len1, _results;

        _results = [];
        for (_j = 0, _len1 = preResult.length; _j < _len1; _j++) {
          pair = preResult[_j];
          if (pair.path.indexOf(this.modulesFolder) > -1 && pair.path.indexOf('assets') === -1) {
            _results.push(this.setupModule(pair));
          }
        }
        return _results;
      }).call(this);
      modules = {};
      modulesRows.map(function(element, index) {
        if (Object.keys(modules).indexOf(element.moduleName) === -1) {
          modules[element.moduleName] = [];
        }
        return modules[element.moduleName].push(element);
      });
      return this.writeModules(modules);
    };

    return JadeAngularJsCompiler;

  })();

}).call(this);
